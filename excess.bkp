;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

<li className="list-group-item clearfix">
  <a href={ "#users/" + this.props.user.get('username') }> { this.props.user.get('username') } </a>
  <button type="button" className="close" data-id = { this.props.user.get('id')  }  data-dismiss="alert" aria-label="Close" onClick = { this.handleDelete }> &times; </button>
</li>

<div className = "col-xs-12">
  <NewUser onAddUser = { this.addUser } onError = {this.errorHandle}/>
</div>

var NewUser = React.createClass({
  findThenAdd : function(e) {
    var username = this.refs.username.getDOMNode().value;
    $.ajax({
      type: 'GET',
      url: 'https://api.github.com/users/' + username,
      dataType: 'json'
    }).done(function(data, sC, $xhr) {
      if($xhr.status == 202) {
        console.log("retrying..")
      }
      this.props.onAddUser(username);
    }.bind(this)).fail(function() {
      this.props.onError("Username doesn't exists");
    }.bind(this));

    this.refs.username.getDOMNode().value = "";
  },

  handleAdd: function(e) {
    this.findThenAdd()
  },

  render: function() {
    return (
      <div className = "form-horizontal">
        <div className = "form-group">
          <div className = "col-xs-8 col-sm-8">
            <input type="text" ref="username" className="form-control"/>
          </div>
          <div className = "col-sm-offset-2 col-sm-2 col-xs-4">
            <button type="submit" className="btn btn-primary" onClick = {this.handleAdd}> Add User</button>
          </div>
        </div>
      </div>
    );
  }
});

<div className="col-xs-12 col-sm-6 col-md-4">
      <div className="card-container-xs">
      <div className="card">
      <img className="avatar" src={this.state.details.avatar + "&size=75"}/>
      <div className="info">
      <div className="user-name">
      <a href={"#users/" + {this.props.username}>{this.props.username}</a>
        </div>
      <div><small><a href={this.state.details.html_url}/>Profile</small></div>
      </div>
      </div>
      </div>
      </div>
// var SearchData = React.createClass({
//   render: function() {
//     var repo = this.props.repository;
//     return(
//       <div className = "col-xs-12">
//         <div className = "row">
//           <div className = "col-xs-6">
//             <div>
//               <a href={"#contributions/" + repo.owner + "/" + repo.name}> { repo.name } </a>
//             </div>
//             <div> { repo.description } </div>
//           </div>
//           <div className = "col-xs-6">
//             <div> By: <a href={"#users/" + repo.owner }> {repo.owner} </a> </div>
//             <div>
//               <span>source: <a href={ repo.html_url }> github </a></span>
//               <span>forks: { repo.forks } </span>
//             </div>
//           </div>
//         </div>
//       </div>
//     );
//   }
// });

// var xhr = $.ajax({
//   url: 'https://api.github.com/search/repositories',
//   type: 'GET',
//   data: { q: 'language:' + v}
// });
//
// xhr.done(function(data) {
//   var repos = data.items.map(function(data) {
//     return {id: data.id, url: data.html_url,
//       description: data.description, forks: data.forks,
//       name: data.full_name, owner: data.owner.login}
//     });
//     this.setState({
//       repositories: repos
//     });
//   }.bind(this));
//
//   xhr.fail(function(){
//     this.setState({
//       errors: 'Something went wrong!!'
//     });
//   }.bind(this));
